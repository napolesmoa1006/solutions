import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class P3068 {
    
    public static int binarySearch(int[] vector, int value, int left, int right) {
        int mid;
        while (left <= right) {            
            mid = (right + left) / 2;
            if (vector[mid] == value)
                return mid;
            else {
                if (value < vector[mid])
                    right = mid - 1;
                else
                    left = mid + 1;
            }
        }
        return -1;
    }

    public static void main(String[] args) throws IOException {
        // Sorting and Searching II
        InputStreamReader isr = new InputStreamReader(System.in);
        BufferedReader br = new BufferedReader(isr);
        StringTokenizer st;
        int n = Integer.parseInt(br.readLine()), numbers[] = new int[n], q1, q2, i;
        st = new StringTokenizer(br.readLine());
        for (i = 0; i < n; i++)
            numbers[i] = Integer.parseInt(st.nextToken());
        Arrays.sort(numbers);
        st = new StringTokenizer(br.readLine());
        q1 = Integer.parseInt(st.nextToken());
        q2 = Integer.parseInt(st.nextToken());
        st = new StringTokenizer(br.readLine());
        for (i = 0; i < q1; i++) {
            if (binarySearch(numbers, Integer.parseInt(st.nextToken()), 0, numbers.length - 1) != -1)
                System.out.println(":)");
            else
                System.out.println(":(");
        }
        st = new StringTokenizer(br.readLine());
        for (i = 0; i < q2; i++)
            System.out.println(numbers[Integer.parseInt(st.nextToken()) - 1]);
    }
}